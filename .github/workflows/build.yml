name: Build

on: [pull_request]

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
            binary_suffix: 'aarch64-apple-darwin.tar.gz'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
            binary_suffix: 'x86_64-apple-darwin.tar.gz'
          - platform: 'ubuntu-22.04'
            args: ''
            target: 'x86_64-unknown-linux-gnu'
            binary_suffix: 'x86_64-unknown-linux-gnu.tar.gz'
          - platform: 'windows-latest'
            args: ''
            target: 'x86_64-pc-windows-msvc.exe'
            binary_suffix: 'x86_64-pc-windows-gnu.tar.gz'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      # Download the appropriate external binary
      - name: Download external binary
        run: |
          mkdir -p src-tauri/binaries
          curl -L -o "src-tauri/binaries/trin-v0.1.0-alpha.53-${{ matrix.target }}" \
            "https://github.com/ethereum/trin/releases/download/v0.1.0-alpha.53/trin-v0.1.0-alpha.53-${{ matrix.binary_suffix }}"
        shell: bash

      # Make binary executable (not needed for Windows)
      - name: Make binary executable
        if: matrix.platform != 'windows-latest'
        run: chmod +x "src-tauri/binaries/trin-v0.1.0-alpha.53-${{ matrix.target }}"
        shell: bash

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable # Set this to dtolnay/rust-toolchain@nightly
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2

      - name: install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: npm install

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: true
          args: ${{ matrix.args }}
