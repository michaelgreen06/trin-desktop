name: Build

on: [pull_request]

  #push:
    #tags:
      #- 'app-v*'

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
            binary_suffix: 'aarch64-apple-darwin.tar.gz'
          #- platform: 'macos-latest' # for Intel based macs.
            #args: '--target x86_64-apple-darwin'
            #target: 'x86_64-apple-darwin'
            #binary_suffix: 'x86_64-apple-darwin.tar.gz'
          #- platform: 'ubuntu-22.04'
            #args: ''
            #target: 'x86_64-unknown-linux-gnu'
            #binary_suffix: 'x86_64-unknown-linux-gnu.tar.gz'
          #- platform: 'windows-latest'
            #args: ''
            #target: 'x86_64-pc-windows-msvc.exe'
            #binary_suffix: 'x86_64-pc-windows-gnu.tar.gz'

    runs-on: ${{ matrix.platform }}
    env:
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
    steps:
      - uses: actions/checkout@v4

      # setup macos signing certificate
      - name: Import Apple Developer Certificate
        if: matrix.platform == 'macos-latest'
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          security find-identity -v -p codesigning build.keychain

      - name: Verify Certificate
        if: matrix.platform == 'macos-latest'
        run: |
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application")
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
          echo "Certificate imported."

      # Download the appropriate external binary
      - name: Download external binary
        run: |
          mkdir -p src-tauri/binaries
          mkdir -p src-tauri/binaries/trin
          curl -L -o "src-tauri/trin-${{ matrix.binary_suffix }}" \
            "https://github.com/ethereum/trin/releases/download/v0.1.0/trin-v0.1.0-${{ matrix.binary_suffix }}"
          tar -xzf "src-tauri/trin-${{ matrix.binary_suffix }}" -C src-tauri
          mv src-tauri/trin "src-tauri/trin-${{ matrix.target }}"
          ls -la src-tauri/
        shell: bash

      # Make binary executable (not needed for Windows)
      - name: Make binary executable
        if: matrix.platform != 'windows-latest'
        run: chmod +x "src-tauri/trin-${{ matrix.target }}"
        shell: bash

      #- name: Setup inspection script
        #if: matrix.platform == 'macos-latest'
        #run: |
          #cat > inspect-binary.sh << 'EOL'
          ##!/bin/bash
          #echo "Current directory:"
          #pwd

          #echo "\nBinary location and structure:"
          #ls -la src-tauri/binaries/

          #echo "\nDirectory tree:"
          #find src-tauri/binaries -type f -name "*trin*"

          #echo "\nFull directory listing:"
          #ls -R
          #EOL
          #chmod +x inspect-binary.sh

      # Create entitlements file
      - name: Create entitlements file
        if: matrix.platform == 'macos-latest'
        run: |
          cat > src-tauri/entitlements.plist << 'EOL'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>com.apple.security.cs.allow-jit</key>
              <true/>
              <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
              <true/>
              <key>com.apple.security.cs.disable-library-validation</key>
              <true/>
              <key>com.apple.security.cs.allow-dyld-environment-variables</key>
              <true/>
              <key>com.apple.security.get-task-allow</key>
              <true/>
              <key>com.apple.security.automation.apple-events</key>
              <true/>
          </dict>
          </plist>
          EOL
          
          echo "Verifying plist format..."
          plutil -lint src-tauri/entitlements.plist
          
          echo "Converting to XML format..."
          plutil -convert xml1 src-tauri/entitlements.plist
          
          echo "File permissions and contents:"
          ls -la src-tauri/entitlements.plist
          cat src-tauri/entitlements.plist
          
          echo "Current working directory:"
          pwd
          
          echo "Full path to entitlements:"
          realpath src-tauri/entitlements.plist

      # Sign the binary
#      - name: Sign external binary
        #if: matrix.platform == 'macos-latest'
        #run: |
          #codesign --force --options runtime \
            #--sign "Developer ID Application: Nick Gheorghita (6F46L33ESN)" \
            #--options runtime \
            #--keychain /Users/runner/Library/Keychains/build.keychain \
            #"src-tauri/binaries/trin-v0.1.0-${{ matrix.target }}"

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable # Set this to dtolnay/rust-toolchain@nightly
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2

      - name: install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: npm install

      - name: Setup Apple API Key
        if: matrix.platform == 'macos-latest'
        run: |
          echo "${{ secrets.APPLE_API_KEY_FILE }}" > api-key.p8
          chmod 600 api-key.p8

      #- name: Validate signing requirements
        #if: matrix.platform == 'macos-latest'
        #run: |
          #echo "Validating environment variables..."
          
          ## Check APPLE_CERTIFICATE decodes to valid binary
          #if echo "$APPLE_CERTIFICATE" | base64 -d > test_cert.p12 2>/dev/null; then
            #echo "✓ APPLE_CERTIFICATE is valid base64"
            #rm test_cert.p12
          #else
            #echo "✗ APPLE_CERTIFICATE is not valid base64"
            #exit 1
          #fi
          
          ## Check APPLE_ID format
          #if [[ "$APPLE_ID" =~ ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$ ]]; then
            #echo "✓ APPLE_ID has valid email format"
          #else
            #echo "✗ APPLE_ID does not appear to be a valid email"
            #exit 1
          #fi
          
          ## Check password variables aren't empty or default values
          #if [ ${#APPLE_CERTIFICATE_PASSWORD} -lt 1 ]; then
            #echo "✗ APPLE_CERTIFICATE_PASSWORD appears to be empty"
            #exit 1
          #fi
          
          #if [ ${#APPLE_ID_PASSWORD} -lt 1 ]; then
            #echo "✗ APPLE_ID_PASSWORD appears to be empty"
            #exit 1
          #fi
          
          #if [ ${#KEYCHAIN_PASSWORD} -lt 1 ]; then
            #echo "✗ KEYCHAIN_PASSWORD appears to be empty"
            #exit 1
          #fi
          
          #echo "Testing certificate import..."
          ## Try to actually import the certificate to validate credentials
          #echo "$APPLE_CERTIFICATE" | base64 -d > test_cert.p12
          #if security create-keychain -p "$KEYCHAIN_PASSWORD" test.keychain && \
             #security unlock-keychain -p "$KEYCHAIN_PASSWORD" test.keychain && \
             #security import test_cert.p12 -k test.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign; then
            #echo "✓ Certificate imports successfully"
            ## Clean up
            #security delete-keychain test.keychain
            #rm test_cert.p12
          #else
            #echo "✗ Failed to import certificate - check APPLE_CERTIFICATE and APPLE_CERTIFICATE_PASSWORD"
            #rm test_cert.p12
            #exit 1
          #fi
          
          #echo "All validation checks passed!"
        #env:
          #APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          #APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          #APPLE_ID: ${{ secrets.APPLE_ID }}
          #APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          #KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Build Tauri App
        uses: tauri-apps/tauri-action@v0.5.0
        timeout-minutes: 20
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}

          # first 3 
          # these worked 1/3
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: "6F46L33ESN"
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

          #APPLE_SIGNING_IDENTITY: ${{ env.CERT_ID }}

          # these are needed for creating the updater assets
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

          # second 3 failed...
          #APPLE_API_KEY_PATH: ${{ github.workspace }}/api-key.p8
          #APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
          #APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install'
          releaseDraft: true
          args: ${{ matrix.args }} --verbose
