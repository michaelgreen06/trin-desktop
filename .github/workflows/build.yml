name: Build

on: [pull_request]
  #  push:
  #  tags:
  #    - 'app-v*'

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
            binary_suffix: 'aarch64-apple-darwin.tar.gz'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
            binary_suffix: 'x86_64-apple-darwin.tar.gz'
          - platform: 'ubuntu-22.04'
            args: ''
            target: 'x86_64-unknown-linux-gnu'
            binary_suffix: 'x86_64-unknown-linux-gnu.tar.gz'
          - platform: 'windows-latest'
            args: ''
            target: 'x86_64-pc-windows-msvc.exe'
            binary_suffix: 'x86_64-pc-windows-gnu.tar.gz'

    runs-on: ${{ matrix.platform }}
    env:
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
    steps:
      - uses: actions/checkout@v4

      # setup macos signing certificate
      - name: Import Apple Developer Certificate
        if: matrix.platform == 'macos-latest'
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          security find-identity -v -p codesigning build.keychain

      - name: Verify Certificate
        if: matrix.platform == 'macos-latest'
        run: |
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application")
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
          echo "Certificate imported."

      # Download the appropriate external binary
      - name: Download external binary
        run: |
          mkdir -p src-tauri/binaries
          curl -L -o "src-tauri/binaries/trin-v0.1.0-alpha.53-${{ matrix.target }}" \
            "https://github.com/ethereum/trin/releases/download/v0.1.0-alpha.53/trin-v0.1.0-alpha.53-${{ matrix.binary_suffix }}"
        shell: bash

      # Make binary executable (not needed for Windows)
      - name: Make binary executable
        if: matrix.platform != 'windows-latest'
        run: chmod +x "src-tauri/binaries/trin-v0.1.0-alpha.53-${{ matrix.target }}"
        shell: bash

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable # Set this to dtolnay/rust-toolchain@nightly
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2

      - name: install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: npm install

      - name: Build Tauri App
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ env.CERT_ID }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          args: ${{ matrix.args }}

      #- name: Notarize App
        #if: matrix.platform == 'macos-latest'
        #run: |
          #echo "Creating ZIP for notarization..."
          #ditto -c -k --keepParent "./src-tauri/target/${{ matrix.target }}/release/bundle/macos/trin-desktop.app" "./trin-desktop.zip"
          
          #echo "Submitting for notarization..."
          #xcrun notarytool submit "./trin-desktop.zip" \
            #--apple-id "$APPLE_ID" \
            #--password "$APPLE_ID_PASSWORD" \
            #--team-id "6F46L33ESN" \
            #--wait
          
          #echo "Stapling app..."
          #xcrun stapler staple "./src-tauri/target/${{ matrix.target }}/release/bundle/macos/trin-desktop.app"
          
          #echo "Notarization complete"
        #env:
          #APPLE_ID: ${{ secrets.APPLE_ID }}
          #APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}

#      - uses: tauri-apps/tauri-action@v0
        #env:
          #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          #APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          #APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          #APPLE_SIGNING_IDENTITY: ${{ env.CERT_ID }}
          #TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          #APPLE_ID: ${{ secrets.APPLE_ID }}
          #APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          #APPLE_TEAM_ID: "6F46L33ESN"
        #with:
          #tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          #releaseName: 'App v__VERSION__'
          #releaseBody: 'See the assets to download this version and install.'
          #releaseDraft: true
          #prerelease: true
#          args: ${{ matrix.args }} --verbose
